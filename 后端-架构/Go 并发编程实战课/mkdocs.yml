site_name: Go 并发编程实战课

theme:
  name: material

  palette:
    # Palette toggle for light mode
    - media: "(prefers-color-scheme: light)"
      scheme: default
      toggle:
        icon: material/brightness-4
        name: Switch to dark mode

    # Palette toggle for dark mode
    - media: "(prefers-color-scheme: dark)"
      scheme: slate
      toggle:
        icon: material/brightness-7
        name: Switch to light mode

  features:
    - navigation.footer
    - content.action.edit
    - navigation.sections
    - content.code.copy

  icon:
    edit: material/pencil
    logo: material/console-line

extra:
  homepage:
  version:
    provider: mike

copyright: Copyright © 2024-Present zkep
repo_url: https://github.com/zkep/mygeektime

markdown_extensions:
  - attr_list
  - md_in_html
  - pymdownx.highlight:
      anchor_linenums: true
  - pymdownx.inlinehilite
  - pymdownx.snippets
  - pymdownx.superfences

nav:
   - Go 并发编程实战课.md
  
   - 开篇词 - 想吃透Go并发编程，你得这样学！.md
  
   - 01 - Mutex：如何解决资源并发访问问题？.md
  
   - 02 - Mutex：庖丁解牛看实现.md
  
   - 03-Mutex：4种易错场景大盘点.md
  
   - 04- Mutex：骇客编程，如何拓展额外功能？.md
  
   - 05- RWMutex：读写锁的实现原理及避坑指南.md
  
   - 06 - WaitGroup：协同等待，任务编排利器.md
  
   - 07 - Cond：条件变量的实现机制及避坑指南.md
  
   - 08 - Once：一个简约而不简单的并发原语.md
  
   - 09 - map：如何实现线程安全的map类型？.md
  
   - 10 - Pool：性能提升大杀器.md
  
   - 11 - Context：信息穿透上下文.md
  
   - 12 - atomic：要保证原子操作，一定要使用这几种方法.md
  
   - 13 - Channel：另辟蹊径，解决并发问题.md
  
   - 14 - Channel：透过代码看典型的应用模式.md
  
   - 15 - 内存模型：Go如何保证并发读写的顺序？.md
  
   - 16 - Semaphore：一篇文章搞懂信号量.md
  
   - 17 - SingleFlight 和 CyclicBarrier：请求合并和循环栅栏该怎么用？.md
  
   - 18 - 分组操作：处理一组子任务，该用什么并发原语？.md
  
   - 19 -  在分布式环境中，Leader选举、互斥锁和读写锁该如何实现？.md
  
   - 20 - 在分布式环境中，队列、栅栏和STM该如何实现？.md
  
   - 结束语 - 再聊Go并发编程的价值和精进之路.md
  